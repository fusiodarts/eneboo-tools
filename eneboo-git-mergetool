#!/bin/bash

if [ "$1" == "install" ]; then 
    git config --global mergetool.eneboo.cmd "eneboo-git-mergetool \$BASE \$LOCAL \$REMOTE \$MERGED" || exit 1;
    git config --global mergetool.eneboo.trustExitCode true || exit 1;
    echo "Se ha instalado correctamente el mergetool 'eneboo'"
    exit 0;
fi

if [ "$1" == "replay-kdiff3" ]; then 
    shift

    LOCAL_BRANCH="HEAD^1"
    REMOTE_BRANCH="HEAD^2"
    BASE_BRANCH=$(git merge-base $LOCAL_BRANCH $REMOTE_BRANCH)
    for file in $*; do
        EXT=${file#*.}
        echo $file
        file="$(git rev-parse --show-prefix)$file"

        cd "$(git rev-parse --show-cdup)"
        git show "$BASE_BRANCH:$file" > "$file.BASE.$EXT"
        git show "$LOCAL_BRANCH:$file" > "$file.LOCAL.$EXT"
        git show "$REMOTE_BRANCH:$file" > "$file.REMOTE.$EXT"
        kdiff3 "$file.BASE.$EXT" "$file.LOCAL.$EXT" "$file.REMOTE.$EXT" -o "$file" 

        echo
    done
    exit 0;
fi

if [ "$1" == "manual" -o "$1" == "replay" ]; then 
    if [ "$1" == "replay" ]; then 
        LOCAL_BRANCH="HEAD^1"
        REMOTE_BRANCH="HEAD^2"
    else
        shift
        LOCAL_BRANCH=$1
        shift
        REMOTE_BRANCH=$1
    fi
    shift

    BASE_BRANCH=$(git merge-base $LOCAL_BRANCH $REMOTE_BRANCH)
    
    for file in $*; do
        EXT=${file#*.}
        echo $file
        file="$(git rev-parse --show-prefix)$file"
        (
        cd "$(git rev-parse --show-cdup)"
        git show "$BASE_BRANCH:$file" > "$file.BASE.$EXT"
        git show "$LOCAL_BRANCH:$file" > "$file.LOCAL.$EXT"
        git show "$REMOTE_BRANCH:$file" > "$file.REMOTE.$EXT"
        if [ "$1" == "replay" ]; then 
            $0 "$file.BASE.$EXT" "$file.LOCAL.$EXT" "$file.REMOTE.$EXT" "$file" && {
                test -s "$file" && {
                    mv "$file" "$file.test1"
                    $0 "$file.BASE.$EXT" "$file.REMOTE.$EXT" "$file.LOCAL.$EXT" "$file" 
                    mv "$file" "$file.test2"
                    kdiff3 "$file.test1" "$file.test2"
                    #kdiff3 "$file.LOCAL.$EXT" "$file" "$file.REMOTE.$EXT" >/dev/null 2>&1 &
                    #kdiff3 "$file.BASE.$EXT" "$file.LOCAL.$EXT" "$file.REMOTE.$EXT" >/dev/null 2>&1 &
                }
            }
        else # replay-kdiff3
            kdiff3 "$file.BASE.$EXT" "$file.LOCAL.$EXT" "$file.REMOTE.$EXT" -o "$file" 
        fi
        )
        echo
    done
    exit 0;
else
    BASE=$1
    LOCAL=$2
    REMOTE=$3
    MERGED=$4
fi

EXT=${MERGED##*.}
MODE="error"

if [ "$EXT" == "qs" ]; then
    MODE="qsdir"
fi

if [ "$EXT" == "ui" ]; then
    MODE="xml"
fi

if [ "$EXT" == "mtd" ]; then
    MODE="xml"
fi

if [ "$EXT" == "xml" ]; then
    MODE="xml"
fi

if [ "$EXT" == "ts" ]; then
    MODE="xml"
fi

if [ "$EXT" == "kut" ]; then
    MODE="xml"
fi

if [ ! -e $BASE ]; then
    exec kdiff3 $LOCAL $REMOTE -o $MERGED --auto
fi

if [ "$EXT" == "qry" ]; then
    MODE="kdiff3"
fi

if [ "$EXT" == "sql" ]; then
    MODE="kdiff3"
fi

if [ "$MODE" == "error" ]; then
    echo "Se desconoce como mezclar la extension '.$EXT'"
    exit 3;
fi

test -e $BASE || { echo "fichero BASE '$BASE' no existe"; exit 2; };
test -e $LOCAL || { echo "fichero LOCAL '$LOCAL' no existe"; exit 2; };
test -e $REMOTE || { echo "fichero REMOTE '$REMOTE' no existe"; exit 2; };

if [ "$MODE" == "kdiff3" ]; then
    exec kdiff3 $BASE $LOCAL $REMOTE -o $MERGED --auto
    exit 3;
fi
 
eneboo-mergetool file-diff $MODE $BASE $REMOTE \
    --output $MERGED.patch || exit 1
    
eneboo-mergetool file-patch $MODE $MERGED.patch $LOCAL \
    --output $MERGED -v || exit 1

unlink $MERGED.patch
test -s $MERGED || exit 5 

exit 0
